---
import BlogLayout from "../../../layouts/BlogLayout.astro";
import Socials from "../../../components/Socials.astro";
import Sidebar from "../../../components/Blog/Sidebar.astro";
import createExcerpt from "../../../utils/createExcerpt";
import Tags from "../../../components/Blog/Tags.astro";

import { fDate } from "developer-toolkit-utils";

export var getStaticPaths = async () => {
  var posts = (await Astro.glob("../posts/*.{md,mdx}")).sort(
    (a, b) =>
      new Date(b.frontmatter.pubDate).valueOf() -
      new Date(a.frontmatter.pubDate).valueOf()
  );
  return posts.map((post) => {
    return {
      params: { slug: post.frontmatter.slug },
      props: { slug: post.frontmatter.slug },
    };
  });
};

var { slug } = Astro.params;

var post = (await Astro.glob("../posts/*.{md,mdx}")).find(
  (post) => post.frontmatter.slug === slug
);

if (!post) {
  return Astro.redirect("/blog");
}

var content = post.compiledContent();
---

<BlogLayout
  title={`withervt â€¢ Blog | ${post.frontmatter.title}`}
  description={`${createExcerpt(post.frontmatter.excerpt)}`}
  img={`https://storage.hylia.dev/${post.frontmatter.image}`}
  isPost={true}
>
<div id="snackbar" class="snackbar d-none"></div>

  <section class="main-content mt-3">
    <div class="container-xl">
      <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
          <li class="breadcrumb-item"><a href="/">Home</a></li>
          <li class="breadcrumb-item"><a href="/blog">Blog</a></li>
          <li class="breadcrumb-item active" aria-current="page">
            {post.frontmatter.title}
          </li>
        </ol>
      </nav>

      <div class="row gy-4">
        <div class="col-lg-8">
          <div class="post post-single">
            <div class="post-header">
              <h1
                class="title mt-0 mb-3"
                style="color: #9faabb; font-size: 25px;"
              >
                {post.frontmatter.title}
              </h1>
              <ul class="meta list-inline mb-0">
                <li class="list-inline-item">
                  <i class="bi bi-stopwatch" id="time_reading"></i>
                </li>
                <li class="list-inline-item">
                  <i class="bi bi-calendar"> </i>
                  {fDate(new Date(post.frontmatter.pubDate))}
                </li>
              </ul>
            </div>
            <div class="featured-image">
              <img
                src={`https://storage.hylia.dev/${post.frontmatter.image}`}
                alt="Post Image"
                title={post.frontmatter.title}
              />
            </div>
            <div
              class="post-content clearfix"
              set:html={content}
              id="post-content"
              style="color: #fff;"
            />
          </div>

          <div class="spacer" data-height="50"></div>

          <div class="post-bottom">
            <div class="row d-flex align-items-center">
              <div class="col-md-6 col-12 text-center text-md-start tags_row">
                <Tags tags={post.frontmatter.categories} />
              </div>
            </div>
          </div>
        </div>

        <div class="col-lg-4">
          <Sidebar />
        </div>
      </div>
    </div>
  </section>

  <script is:inline>
    var TOC = document.getElementById("table-of-contents");
    var postContent = document.getElementById("post-content");

    // Get the H2 elements in the post content
    var H2 = postContent.querySelectorAll("h2");

    if (H2.length === 0) {
      TOC.classList.add("d-none");
    } else {
      TOC.classList.remove("d-none");
      var toc_wrapper = document.getElementById("toc-wrapper");
      for (let i = 0; i < H2.length; i++) {
        var H2ID = H2[i].id;
        var H2TITLE = H2[i].textContent;

        toc_wrapper.innerHTML += `<li><a style="text-decoration: none;" href="#${H2ID}">${H2TITLE}</a></li>`;
      }
    }

    function calculateReadingTime() {
      var textElement = document.getElementById("post-content");
      var outputElement = document.getElementById("time_reading");
      if (!textElement || !outputElement) return;

      var text = textElement.innerText;
      /** The average number of words per minute that a human can read. */
      var wordsPerMinute = 238;
      var words = text.trim().split(/\s+/).length;
      var minutes = Math.ceil(words / wordsPerMinute);

      outputElement.textContent = ` ${minutes} min read`;
    }

    var timers = document.getElementsByClassName("timer");

    function updateDate(timerDateElement, timerDate) {
      var currentDate = new Date();
      var timeDifference = timerDate - currentDate;

      if (timeDifference <= 0) {
        timerDateElement.textContent = "Today";
      } else if (timeDifference <= 86400000) {
        var days = Math.floor(timeDifference / 86400000);
        timerDateElement.textContent = `${days}d ago`;
      } else {
        var days = Math.floor(timeDifference / (1000 * 60 * 60 * 24));
        var hours = Math.floor(
          (timeDifference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)
        );
        var minutes = Math.floor(
          (timeDifference % (1000 * 60 * 60)) / (1000 * 60)
        );
        var seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);
        timerDateElement.textContent = `${days} d, ${hours} h, ${minutes} m, ${seconds} s`;
      }
    }

    function updateTimer(timerElement) {
      var timerValue = timerElement.textContent;
      var timerDate = new Date(timerValue * 1000); // Convert timer value to milliseconds
      updateDate(timerElement, timerDate);
      setInterval(() => {
        updateDate(timerElement, timerDate);
      }, 1000);
    }

    for (let i = 0; i < timers.length; i++) {
      var timerElement = timers[i];
      updateTimer(timerElement);
    }


    function InheritPost() {
      var inf = document.getElementsByClassName("inherit-post");

      var TEMPLATE = `<a href="[link]"> <span class="badge rounded-pill bg-primary"><i class="bi bi-book-fill" width="16px" alt="Book" style="padding-right: 5px;"></i> Read: [title]</span></a>`;

      for (let i = 0; i < inf.length; i++) {
        var element = inf[i];
        // Get custom attributes
        var link = element.getAttribute("data-link");
        var title = element.getAttribute("data-title");
        TEMPLATE = TEMPLATE.replace("[link]", link).replace("[title]", title);
        element.innerHTML = TEMPLATE;
      }
    }

    InheritPost();
    calculateReadingTime();
  </script>
  <style is:global>
    kbd {
      background-color: #333430;
      color: #fff;
      padding: 2px 5px;
      border-radius: 3px;
    }
    div[data-rehype-pretty-code-fragment] {
      background-color: #111;
    }
    pre > code {
      display: grid;
      background-color: rgba(200, 200, 255, 0.09);
      border-left: 3px solid #60a5fa;
      padding: 10px;
      border-radius: 3px;
      counter-reset: line;
    }
    .highlighted {
      background-color: rgba(200, 200, 255, 0.1);
      border-left-color: #60a5fa;
      border-left-width: 3px;
      border-left-style: solid;
    }

    code > [data-line]::before {
      counter-increment: line;
      content: counter(line);

      /* Other styling */
      display: inline-block;
      width: 1rem;
      margin-right: 2rem;
      text-align: right;
      color: gray;
    }

    code[data-line-numbers-max-digits="2"] > [data-line]::before {
      width: 2rem;
    }

    code[data-line-numbers-max-digits="3"] > [data-line]::before {
      width: 3rem;
    }

    code {
      color: white;
      background-color: #111;
      padding: 2px 5px;
      border-radius: 3px;
    }

    h1 {
      color: #fff;
      /* Center the text */
      text-align: center;
      font-size: 30px;
    }

    h2 {
      color: #fff;
      font-size: 25px;
    }

    h3 {
      color: #fff;
      font-size: 20px;
    }

    h4 {
      color: #fff;
      font-size: 15px;
    }

    .tags_row {
      /* Make a row of tags, make them left to right, it does not matter the amount. Do not wrap them */
      display: flex;
      flex-direction: row;
      justify-content: center;
    }
  </style>
</BlogLayout>
