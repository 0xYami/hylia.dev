---
import Layout from "../layouts/Layout.astro";
import { getCollection } from "astro:content";
import { createIndexHtml } from "../utils/Socials";

const about = await getCollection("misc").then((res) => {
    return res.find((item) => item.slug === "about");
});

if (!about) {
    return {
        status: 404,
    };
}

const AboutContent = await about.render();


---

<Layout
  title="Yami • Home"
  description="Hello, I’m Stella, a developer specializing in creating Discord bots and open-source solutions at Hyperstar. Additionally, I identify as a TransFemale, using She/Her pronouns."
>
<section class="credential-area">
    <div class="container">
        <div class="gx-row d-flex">
            <div class="credential-sidebar-wrap" data-aos="zoom-in">
                <div class="credential-sidebar text-center">
                    <div class="shadow-box">
                        <img src="/static/images/bg.png" alt="BG" class="bg-img">
                        <div class="img-box">
                            <img src="https://avatars.githubusercontent.com/u/93791569" alt="About Me">
                        </div>
                        <h2>Stella</h2>
                        <p>@yamideveloper</p>

                        <ul class="social-links d-flex justify-content-center" set:html={createIndexHtml({ size: { width: 200, height: 200 }, css: "padding: 0 5px; margin-bottom: 5px;", li: true })}>
                            
                        </ul>

                        <a href="mailto:withervt@gmail.com" class="theme-btn">Contact Me</a>
                    </div>
                </div>
            </div>

            <div class="credential-content flex-1">
                <div class="credential-about" data-aos="zoom-in">
                    <h2>About Me</h2>
                    <AboutContent.Content />
                </div>

                <div class="credential-edc-exp credential-experience">
                    <h2 data-aos="fade-up">Experience</h2>
                    <div id="work"></div>
                </div>

                <div class="credential-edc-exp credential-education">
                    <h2 data-aos="fade-up">Education</h2>
                    <div id="education"></div>
                </div>
            </div>
        </div>
    </div>
</section>
  <script is:inline>
    const WorkUrl = "https://storage.hylia.dev/json/work";
    const EducationUrl = "https://storage.hylia.dev/json/education";

    (async () => {
        const work = await fetch(WorkUrl).then((res) => res.json());
        const education = await fetch(EducationUrl).then((res) => res.json());
    
        const workDiv = document.getElementById("work");
        const educationDiv = document.getElementById("education");
    
        work.forEach((item) => {
            const div = document.createElement("div");
            div.classList.add("credential-edc-exp-item");
            div.setAttribute("data-aos", "zoom-in");
    
            const h4 = document.createElement("h4");
            h4.innerText = `${item.date}`;
    
            const a = document.createElement("a");
            a.innerText = item.company_name;
            a.href = item.link;
            a.style.fontSize = "18px";
            a.style.color = "var(--primary_color)";
    
            const h5 = document.createElement("h5");
            h5.innerText = item.position;
    
            const ul = document.createElement("ul");
            
            item.list.forEach((li) => {
                const liItem = document.createElement("li");
                liItem.innerText = `• ${li}`;
                ul.appendChild(liItem);
            });

    
            div.appendChild(h4);
            div.appendChild(a);
            div.appendChild(h5);
            div.appendChild(ul);
    
            workDiv.appendChild(div);
        });

        education.forEach((item) => {
            const div = document.createElement("div");
            div.classList.add("credential-edc-exp-item");
            div.setAttribute("data-aos", "zoom-in");
    
            const h4 = document.createElement("h4");
            h4.innerText = `${item.time}`;
    
            const h3 = document.createElement("h3");
            h3.innerText = item.org;
    
            const h5 = document.createElement("h5");
            h5.innerText = item.degree;
    

    
            div.appendChild(h4);
            div.appendChild(h3);
            div.appendChild(h5);
    
            educationDiv.appendChild(div);
        });

    })()

    function getTimeRemaining(endtime) {
      const total = Date.parse(endtime) - Date.parse(new Date());
      const seconds = Math.floor((total / 1000) % 60);
      const minutes = Math.floor((total / 1000 / 60) % 60);
      const hours = Math.floor((total / (1000 * 60 * 60)) % 24);
      const days = Math.floor(total / (1000 * 60 * 60 * 24));

      return {
        total,
        days,
        hours,
        minutes,
        seconds,
      };
    }

    function initializeClock(id, endtime) {
      const clock = document.getElementById(id);
      const daysSpan = clock.querySelector(".days");
      const hoursSpan = clock.querySelector(".hours");
      const minutesSpan = clock.querySelector(".minutes");
      const secondsSpan = clock.querySelector(".seconds");

      function updateClock() {
        const t = getTimeRemaining(endtime);

        daysSpan.innerHTML = t.days;
        hoursSpan.innerHTML = ("0" + t.hours).slice(-2);
        minutesSpan.innerHTML = ("0" + t.minutes).slice(-2);
        secondsSpan.innerHTML = ("0" + t.seconds).slice(-2);

        if (t.total <= 0) {
          clearInterval(timeinterval);
        }
      }

      updateClock();
      const timeinterval = setInterval(updateClock, 1000);
    }

    function setDate(date, id) {
      const dateDiv = document.getElementById(id);

      // Get the years since the date
      const years = Math.floor(
        (new Date() - new Date(date).getTime()) / 3.15576e10
      );

      // Set the date
      dateDiv.innerHTML = `${years}`;
    }

  </script>
</Layout>
